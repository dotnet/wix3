<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the Microsoft Reciprocal License. See LICENSE.TXT file in the project root for full license information. -->


<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <SigningToolExe>$(WIX_ROOT).tools\sign.exe</SigningToolExe>
    <SigningCommand>code azure-key-vault</SigningCommand>
    <SigningFilelist>$(MSBuildThisFileDirectory)signing-filter.none.txt</SigningFilelist>
    <SigningConfiguration>--description "WiX Toolset" --description-url "https://wixtoolset.org/" --timestamp-url "http://timestamp.digicert.com" --file-list "$(SigningFilelist)" --azure-key-vault-url $(SigningKeyVaultUri) --azure-key-vault-tenant-id $(SigningTenantId) --azure-key-vault-client-id $(SigningClientId) --azure-key-vault-client-secret $(SigningClientSecret) --azure-key-vault-certificate $(SigningCertName)</SigningConfiguration>
  </PropertyGroup>

  <!-- ==================================== -->
  <!-- =========== .NET SIGNING =========== -->
  <!-- ==================================== -->

  <Import Project="$(SignToolTaskPath)build\Microsoft.DotNet.SignTool.props" />

  <!-- Clear out any defaults from .NET tools -->
  <ItemGroup>
    <FileExtensionSignInfo Remove=".dll" />
    <FileExtensionSignInfo Remove=".exe" />
    <FileExtensionSignInfo Remove=".cab" />
    <FileExtensionSignInfo Remove=".nupkg" />
    <FileExtensionSignInfo Include=".dll;.exe;.cab;.msi" CertificateName="3PartySHA2" />
    <FileExtensionSignInfo Include=".nupkg" CertificateName="NuGet" />
  </ItemGroup>

  <PropertyGroup>
    <TestSign Condition="'$(TestSign)'==''">true</TestSign>
    <SignLogDir>$(WIX_ROOT)build\logs</SignLogDir>
    <SignTempDir>$(WIX_ROOT)build\tmp</SignTempDir>
    <DryRun Condition="'$(OfficialBuild)' != 'true'">true</DryRun>
    <DryRun Condition="'$(OfficialBuild)' == 'true'">false</DryRun>
  </PropertyGroup>

  <!-- ==================================== -->
  <!-- =========== .NET SIGNING =========== -->
  <!-- ==================================== -->

  <ItemGroup>
    <!-- By default, $(TargetPath) will be signed. You can add files to @(FilesToSign) to sign them as well. -->
    <FilesToSign Include="$(TargetPath)" />
  </ItemGroup>

  <Target Name="SignFiles" AfterTargets="AfterBuild" DependsOnTargets="_FindMSBuild" Condition="'$(SignOutput)'=='true'">
    <Message Importance="high" Text="Signing file: %(FilesToSign.FullPath)" />

    <ItemGroup>
      <_FileSignInfo Remove="@(_FileSignInfo)" />
      <FileSignInfo Remove="@(FileSignInfo)" />
      <_FileSignInfo Include="@(FilesToSign->'%(Filename)%(Extension)')" CertificateName="3PartySHA2" />
      <FileSignInfo Include="@(_FileSignInfo->Distinct())" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask DoStrongNameCheck="false"
                                            DryRun="$(DryRun)"
                                            FileExtensionSignInfo="@(FileExtensionSignInfo)"
                                            FileSignInfo="@(FileSignInfo)"
                                            ItemsToSign="@(FilesToSign)"
                                            LogDir="$(SignLogDir)"
                                            MicroBuildCorePath="$(MicroBuildCorePath)"
                                            MSBuildPath="$(_DesktopMSBuildPath)"
                                            TempDir="$(SignTempDir)"
                                            TestSign="$(TestSign)" />
  </Target>

  <!--
  ================================================================================================

    Signing overrides to actually do signing. We don't sign the MSI packages or their CABs because
    they are always wrapped in a bundle that is signed.

  ================================================================================================
  -->
  <Target Name="SignCabs" />

  <Target Name="SignMsi" />

  <Target Name="SignContainers" />

  <Target Name="_FindMSBuild">
    <!-- Use VSWHERE to compute the path of desktop MSBUILD so we can run signing. -->
    <Exec Command="&quot;$(VSWherePath)vswhere.exe&quot; -latest -prerelease -property installationPath -requires Microsoft.Component.MSBuild" ConsoleToMsBuild="true" StandardErrorImportance="high">
      <Output TaskParameter="ConsoleOutput" PropertyName="_VSInstallDir" />
    </Exec>

    <PropertyGroup>
      <_DesktopMSBuildPath>$(_VSInstallDir)\MSBuild\Current\Bin\msbuild.exe</_DesktopMSBuildPath>
      <_DesktopMSBuildPath Condition="!Exists('$(_DesktopMSBuildPath)')">$(_VSInstallDir)\MSBuild\15.0\Bin\msbuild.exe</_DesktopMSBuildPath>
    </PropertyGroup>
  </Target>

  <Target Name="SignBundleEngine" DependsOnTargets="_FindMSBuild">
    <Message Importance="high" Text="Signing bundle engine: @(SignBundleEngine->&apos;%(Identity)&apos;)" />

    <ItemGroup>
      <_FileSignInfo Remove="@(_FileSignInfo)" />
      <FileSignInfo Remove="@(FileSignInfo)" />
      <_FileSignInfo Include="@(SignBundleEngine->'%(Filename)%(Extension)')" CertificateName="3PartySHA2" />
      <FileSignInfo Include="@(_FileSignInfo->Distinct())" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask DoStrongNameCheck="false"
                                            DryRun="$(DryRun)"
                                            FileExtensionSignInfo="@(FileExtensionSignInfo)"
                                            FileSignInfo="@(FileSignInfo)"
                                            ItemsToSign="@(FilesToSign)"
                                            LogDir="$(SignLogDir)"
                                            MicroBuildCorePath="$(MicroBuildCorePath)"
                                            MSBuildPath="$(_DesktopMSBuildPath)"
                                            TempDir="$(SignTempDir)"
                                            TestSign="$(TestSign)" />
  </Target>

  <Target Name="SignBundle" DependsOnTargets="_FindMSBuild">
    <Message Importance="high" Text="Signing bundle: @(SignBundle->&apos;%(Identity)&apos;)" />

    <ItemGroup>
      <_FileSignInfo Remove="@(_FileSignInfo)" />
      <FileSignInfo Remove="@(FileSignInfo)" />
      <_FileSignInfo Include="@(SignBundle->'%(Filename)%(Extension)')" CertificateName="3PartySHA2" />
      <FileSignInfo Include="@(_FileSignInfo->Distinct())" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask DoStrongNameCheck="false"
                                            DryRun="$(DryRun)"
                                            FileExtensionSignInfo="@(FileExtensionSignInfo)"
                                            FileSignInfo="@(FileSignInfo)"
                                            ItemsToSign="@(FilesToSign)"
                                            LogDir="$(SignLogDir)"
                                            MicroBuildCorePath="$(MicroBuildCorePath)"
                                            MSBuildPath="$(_DesktopMSBuildPath)"
                                            TempDir="$(SignTempDir)"
                                            TestSign="$(TestSign)" />
  </Target>

  <!-- Sentinel value that indicates WixBuid.Signing.targets has been initialized. -->
  <PropertyGroup>
    <WixBuildSigningTargetsDefined>true</WixBuildSigningTargetsDefined>
  </PropertyGroup>
</Project>
